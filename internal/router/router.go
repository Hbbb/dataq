// Code generated by ccf. DO NOT EDIT.
package router

import (
	"github.com/labstack/echo/v4"
	"go.quinn.io/dataq/pages"
)

// RegisterRoutes adds all page routes to the Echo instance
func RegisterRoutes(e *echo.Echo) {
	e.GET("/content/:hash", ContentHashHandler)
	e.GET("/", IndexHandler)
	e.GET("/plugin/:id/extract/:hash", PluginIdExtractHashHandler)
	e.GET("/plugin/:id", PluginIdHandler)
	e.GET("/plugin/:id/transform/:hash", PluginIdTransformHashHandler)
}

// ContentHashHandler handles requests to /content/:hash
func ContentHashHandler(c echo.Context) error {
	result, err := pages.ContentHashHandler(c, c.Param("hash"))
	if err != nil {
		return err
	}
	return pages.ContentHash(result).Render(c.Request().Context(), c.Response().Writer)
}

// IndexHandler handles requests to /
func IndexHandler(c echo.Context) error {
	result, err := pages.IndexHandler(c)
	if err != nil {
		return err
	}
	return pages.Index(result).Render(c.Request().Context(), c.Response().Writer)
}

// PluginIdExtractHashHandler handles requests to /plugin/:id/extract/:hash
func PluginIdExtractHashHandler(c echo.Context) error {
	result, err := pages.PluginIdExtractHashHandler(c, c.Param("id"), c.Param("hash"))
	if err != nil {
		return err
	}
	return pages.PluginIdExtractHash(result).Render(c.Request().Context(), c.Response().Writer)
}

// PluginIdHandler handles requests to /plugin/:id
func PluginIdHandler(c echo.Context) error {
	result, err := pages.PluginIdHandler(c, c.Param("id"))
	if err != nil {
		return err
	}
	return pages.PluginId(result).Render(c.Request().Context(), c.Response().Writer)
}

// PluginIdTransformHashHandler handles requests to /plugin/:id/transform/:hash
func PluginIdTransformHashHandler(c echo.Context) error {
	result, err := pages.PluginIdTransformHashHandler(c, c.Param("id"), c.Param("hash"))
	if err != nil {
		return err
	}
	return pages.PluginIdTransformHash(result).Render(c.Request().Context(), c.Response().Writer)
}
